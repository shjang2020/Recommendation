FAST API-base 프로젝트 구조 및 실행 가이드
=====================================

1. 프로젝트 구조
---------------

1.1 핵심 파일
- app.py: FastAPI 라우터 및 엔드포인트 정의
- recommender.py: 추천 시스템 로직 구현
- data_loader.py: 데이터 로딩 및 전처리 기능
- cache.py: 캐싱 시스템 구현
- logger.py: 로깅 시스템 구현
- exceptions.py: 커스텀 예외 처리 정의

1.2 설정 파일
- requirements.txt: 프로젝트 의존성 패키지 목록
- Dockerfile: Docker 컨테이너 설정
- docker-compose.yml: Docker 서비스 구성
- setup_instructions.txt: 프로젝트 설정 가이드

1.3 디렉토리
- data/: 데이터 파일 저장 디렉토리
- logs/: 로그 파일 저장 디렉토리
- .vscode/: VS Code 설정 디렉토리
- __pycache__/: Python 캐시 파일 디렉토리

2. 파일별 역할
-------------

2.1 API 관련 파일
- app.py: API 엔드포인트 정의 및 라우팅 처리

2.2 핵심 기능 파일
- recommender.py: 추천 알고리즘 구현 및 추천 로직 처리
- data_loader.py: 데이터 로딩, 전처리, 변환 기능
- cache.py: 성능 최적화를 위한 캐싱 시스템
- logger.py: 로깅 설정 및 로그 관리
- exceptions.py: 커스텀 예외 클래스 정의

2.3 설정 및 배포 파일
- requirements.txt: 필요한 Python 패키지 목록
- Dockerfile: Docker 이미지 빌드 설정
- docker-compose.yml: 서비스 구성 및 환경 설정
- setup_instructions.txt: 프로젝트 설정 방법 안내

3. 실행 순서
-----------

3.1 로컬 환경에서 실행
1. Python 가상환경 생성 및 활성화
2. requirements.txt의 의존성 설치:
   pip install -r requirements.txt
3. FastAPI 애플리케이션 실행:
   uvicorn app:app --reload

3.2 Docker를 사용한 실행
1. Docker 이미지 빌드:
   docker build -t fastapi-base .
2. Docker Compose로 서비스 실행:
   docker-compose up

4. API 엔드포인트
---------------
- GET /: 기본 엔드포인트
- GET /recommendations: 추천 결과 조회
- POST /feedback: 사용자 피드백 처리
- GET /health: 서비스 상태 확인

5. 주의사항
----------
- 실행 전 data/ 디렉토리에 필요한 데이터 파일이 있는지 확인
- 환경 변수 설정이 필요한 경우 .env 파일 생성
- 로그 파일은 logs/ 디렉토리에 저장됨 